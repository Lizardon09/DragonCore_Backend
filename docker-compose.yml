version: "2.2"

services:
    setup:
        image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_STACK_VERSION}
        container_name: "dragoncore_backend_setup"
        volumes:
            - dragoncore_certs:/usr/share/elasticsearch/config/certs
        networks:
            - dragoncore_backend_network
        user: "0"
        command: >
          bash -c '
            if [ x${ELASTIC_PASSWORD} == x ]; then
              echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
              exit 1;
            elif [ x${KIBANA_PASSWORD} == x ]; then
              echo "Set the KIBANA_PASSWORD environment variable in the .env file";
              exit 1;
            fi;
            if [ ! -f certs/ca.zip ]; then
              echo "Creating CA";
              bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
              unzip config/certs/ca.zip -d config/certs;
            fi;
            if [ ! -f certs/certs.zip ]; then
              echo "Creating certs";
              echo -ne \
              "instances:\n"\
              "  - name: dragoncoreElastic\n"\
              "    dns:\n"\
              "      - dragoncoreElastic\n"\
              "      - localhost\n"\
              "    ip:\n"\
              "      - 127.0.0.1\n"\
              > config/certs/instances.yml;
              bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
              unzip config/certs/certs.zip -d config/certs;
            fi;
            echo "Setting file permissions"
            chown -R root:root config/certs;
            find . -type d -exec chmod 750 \{\} \;;
            find . -type f -exec chmod 640 \{\} \;;
            echo "Waiting for Elasticsearch availability";
            until curl --cacert config/certs/ca/ca.crt https://dragoncoreElastic:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
            echo "Setting kibana_system password";
            until curl -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://dragoncoreElastic:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
            echo "All done!";
          '
        healthcheck:
          test: ["CMD-SHELL", "[ -f config/certs/dragoncoreElastic/dragoncoreElastic.crt ]"]
          interval: 1s
          timeout: 5s
          retries: 120
          
    dragoncoreElastic:
        depends_on:
            setup:
                condition: service_healthy
        image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_STACK_VERSION}
        container_name: "dragoncoreElastic"
        networks:
            - dragoncore_backend_network
        volumes:
          - dragoncore_certs:/usr/share/elasticsearch/config/certs
          - dragoncoreElastic_data:/usr/share/elasticsearch/data
        ports:
          - ${ES_PORT}:9200
        environment:
          - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
          - bootstrap.memory_lock=true
          - discovery.type=single-node
          - xpack.security.enabled=true
          - xpack.security.http.ssl.enabled=true
          - xpack.security.http.ssl.key=certs/dragoncoreElastic/dragoncoreElastic.key
          - xpack.security.http.ssl.certificate=certs/dragoncoreElastic/dragoncoreElastic.crt
          - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
          - xpack.security.http.ssl.verification_mode=certificate
          - xpack.security.transport.ssl.enabled=true
          - xpack.security.transport.ssl.key=certs/dragoncoreElastic/dragoncoreElastic.key
          - xpack.security.transport.ssl.certificate=certs/dragoncoreElastic/dragoncoreElastic.crt
          - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
          - xpack.security.transport.ssl.verification_mode=certificate
          - xpack.license.self_generated.type=${LICENSE}
        mem_limit: ${MEM_LIMIT}
        ulimits:
          memlock:
            soft: -1
            hard: -1
        healthcheck:
          test:
            [
              "CMD-SHELL",
              "curl --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
            ]
          interval: 10s
          timeout: 10s
          retries: 120
          
    dragoncoreKibana:
        depends_on:
            dragoncoreElastic:
                condition: service_healthy
        image: docker.elastic.co/kibana/kibana:${KIBANA_STACK_VERSION}
        container_name: "dragoncoreKibana"
        networks:
            - dragoncore_backend_network
        volumes:
          - dragoncore_certs:/usr/share/kibana/config/certs
          - dragoncoreKibana_data:/usr/share/kibana/data
        ports:
          - ${KIBANA_PORT}:5601
        environment:
          - SERVERNAME=dragoncoreKibana
          - ELASTICSEARCH_HOSTS=https://dragoncoreElastic:9200
          - ELASTICSEARCH_USERNAME=kibana_system
          - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
          - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
        mem_limit: ${MEM_LIMIT}
        healthcheck:
          test:
            [
              "CMD-SHELL",
              "curl -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
            ]
          interval: 10s
          timeout: 10s
          retries: 120
          
    dragoncoreBackend:
        depends_on:
            dragoncoreKibana:
                condition: service_healthy
            dragoncoreElastic:
                condition: service_healthy
        build:
            context: .
            dockerfile: dev.dockerfile
        image: ${DOCKER_REGISTRY-}dragoncorebackend
        container_name: "dragoncoreBackend"
        networks:
            - dragoncore_backend_network
        volumes:
         - dragoncore_certs:/usr/share/dragoncore/config/certs
         - dragoncoreBackend_data:/usr/share/dragoncore/data
        ports:
          - ${DRAGONCORE_BACKEND_PORT}:44314
        environment:
         - ASPNETCORE_ENVIRONMENT=Development
         - ASPNETCORE_Kestrel__Certificates__Default__Password=Croagunk1!
         - ASPNETCORE_Kestrel__Certificates__Default__Path=certs/DragonCore.API.pfx
          
volumes:
  dragoncore_certs:
    driver: local
    name: dragoncore_certs
  dragoncoreBackend_data:
    driver: local
    name: dragoncoreBackend_data
  dragoncoreElastic_data:
    driver: local
    name: dragoncoreElastic_data
  dragoncoreKibana_data:
    driver: local
    name: dragoncoreKibana_data

networks:
  dragoncore_backend_network:
    driver: bridge
    name: dragoncore_backend_network